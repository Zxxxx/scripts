#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time   : 21:57
# @Author : Darkmelody 
# @File   : PentestBox_add_tool
import os, getopt, sys

eval_class = {
    "exe": "",
    "py": "python",
    "jar": "start javaw -jar",
    "rb": "ruby"
}

script_path = os.getcwd()
run_path = ""
run_args = ""
command = ""
application_name = ""
base_dir = os.environ['pentestbox_root']
aliases = os.path.join(base_dir, "config/aliases")


def exited():
    print 'pentestbox_add_tool.py -a <Application Name> -f <File Path> -c <Command Line Arguments>'
    sys.exit(2)


try:
    opts, args = getopt.getopt(sys.argv[1:], "hf:a:c:")
except getopt.GetoptError:
    exited()

try:
    base_dir = os.environ['pentestbox_root']
except:
    print "Run This Script In Pentest Tool "
    exit()
if len(opts)<1:
	exited()
for opt, arg in opts:
    if opt == "-h":
        exited()
    elif opt in ["-f"]:
        run_path = os.path.realpath(os.path.join(script_path, arg))

        if not os.path.isfile(run_path):
            exited()
        if base_dir not in run_path:
            print "Make sure the directory structure points to the proper location before adding"
            exit()
        else:
            run_path = run_path.replace(base_dir, "%pentestbox_root%")

    elif opt in ["-c"]:
        run_args = arg
    elif opt in ["-a"]:
        application_name = arg

suffix = run_path.split(".")[-1]
if suffix in eval_class.keys():
    command = "\n%s=%s \"%s\" %s $*" % (application_name,eval_class[suffix], run_path, run_args)
else:
    print "Unsupported suffix type %s,Please add the execution parameters manually."

with open(aliases, "a") as file:
    file.writelines(command)
os.system(
    'doskey /macrofile="%pentestbox_ROOT%\\config\\aliases"'
)
print "%s add success,restarting PentestBox." % application_name